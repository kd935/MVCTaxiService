// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiService.Models;

namespace TaxiService.Migrations
{
    [DbContext(typeof(TaxiServiceContext))]
    [Migration("20200306115845_IdentityAdded")]
    partial class IdentityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TaxiService.Models.Clients", b =>
                {
                    b.Property<string>("ClientPhoneNumber")
                        .HasColumnName("client_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnName("client_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ClientPhoneNumber")
                        .HasName("PK__Clients__F48965FECB992C12");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TaxiService.Models.Drivers", b =>
                {
                    b.Property<string>("DriverPhoneNumber")
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("DriverStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("driver_status")
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("('Свободен')")
                        .HasMaxLength(10);

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnName("vehicle_id")
                        .HasColumnType("int");

                    b.HasKey("DriverPhoneNumber")
                        .HasName("PK__Drivers__E882CAE8427952ED");

                    b.HasIndex("LocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TaxiService.Models.DriversAndTimes", b =>
                {
                    b.Property<int>("TimeId")
                        .HasColumnName("time_id")
                        .HasColumnType("int");

                    b.Property<string>("DriverPhoneNumber")
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("TimeId", "DriverPhoneNumber")
                        .HasName("PK__DriversA__913F471794A9766C");

                    b.HasIndex("DriverPhoneNumber");

                    b.ToTable("DriversAndTimes");
                });

            modelBuilder.Entity("TaxiService.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<string>("Location1")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("TaxiService.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnName("client_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Comforts")
                        .HasColumnName("comforts")
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.Property<string>("DriverPhoneNumber")
                        .IsRequired()
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int>("MinimalPrice")
                        .HasColumnName("minimal_price")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("OrderTimeId")
                        .HasColumnName("order_time_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientPhoneNumber");

                    b.HasIndex("DriverPhoneNumber");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderTimeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TaxiService.Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time1")
                        .HasColumnName("time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("TaxiService.Models.Vehicles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnName("vehicle_number")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnName("vehicle_type")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Models.Drivers", b =>
                {
                    b.HasOne("TaxiService.Models.Location", "Location")
                        .WithMany("Drivers")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Vehicles", "Vehicle")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_vehicle_id")
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Models.DriversAndTimes", b =>
                {
                    b.HasOne("TaxiService.Models.Drivers", "DriverPhoneNumberNavigation")
                        .WithMany("DriversAndTimes")
                        .HasForeignKey("DriverPhoneNumber")
                        .HasConstraintName("fk_driver_phone")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Time", "Time")
                        .WithMany("DriversAndTimes")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("fk_time_id")
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Models.Order", b =>
                {
                    b.HasOne("TaxiService.Models.Clients", "ClientPhoneNumberNavigation")
                        .WithMany("Order")
                        .HasForeignKey("ClientPhoneNumber")
                        .HasConstraintName("fk_client")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Drivers", "DriverPhoneNumberNavigation")
                        .WithMany("Order")
                        .HasForeignKey("DriverPhoneNumber")
                        .HasConstraintName("fk_driver")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Location", "Location")
                        .WithMany("Order")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_order_location_id")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Time", "OrderTime")
                        .WithMany("Order")
                        .HasForeignKey("OrderTimeId")
                        .HasConstraintName("fk_order_time")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
