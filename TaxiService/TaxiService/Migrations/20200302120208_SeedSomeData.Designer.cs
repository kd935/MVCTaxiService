// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxiService.Models;

namespace TaxiService.Migrations
{
    [DbContext(typeof(TaxiServiceContext))]
    [Migration("20200302120208_SeedSomeData")]
    partial class SeedSomeData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaxiService.Models.Clients", b =>
                {
                    b.Property<string>("ClientPhoneNumber")
                        .HasColumnName("client_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnName("client_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ClientPhoneNumber")
                        .HasName("PK__Clients__F48965FECB992C12");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientPhoneNumber = "0994382833",
                            ClientName = "Konstantin"
                        });
                });

            modelBuilder.Entity("TaxiService.Models.Drivers", b =>
                {
                    b.Property<string>("DriverPhoneNumber")
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("DriverStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("driver_status")
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("('Свободен')")
                        .HasMaxLength(10);

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnName("vehicle_id")
                        .HasColumnType("int");

                    b.HasKey("DriverPhoneNumber")
                        .HasName("PK__Drivers__E882CAE8427952ED");

                    b.HasIndex("LocationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TaxiService.Models.DriversAndTimes", b =>
                {
                    b.Property<int>("TimeId")
                        .HasColumnName("time_id")
                        .HasColumnType("int");

                    b.Property<string>("DriverPhoneNumber")
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("TimeId", "DriverPhoneNumber")
                        .HasName("PK__DriversA__913F471794A9766C");

                    b.HasIndex("DriverPhoneNumber");

                    b.ToTable("DriversAndTimes");
                });

            modelBuilder.Entity("TaxiService.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<string>("Location1")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("TaxiService.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnName("client_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Comforts")
                        .HasColumnName("comforts")
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.Property<string>("DriverPhoneNumber")
                        .IsRequired()
                        .HasColumnName("driver_phone_number")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("int");

                    b.Property<int>("MinimalPrice")
                        .HasColumnName("minimal_price")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnName("order_status")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("OrderTimeId")
                        .HasColumnName("order_time_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientPhoneNumber");

                    b.HasIndex("DriverPhoneNumber");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderTimeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TaxiService.Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time1")
                        .HasColumnName("time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("TaxiService.Models.Vehicles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnName("vehicle_number")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnName("vehicle_type")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("TaxiService.Models.Drivers", b =>
                {
                    b.HasOne("TaxiService.Models.Location", "Location")
                        .WithMany("Drivers")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_location_id")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Vehicles", "Vehicle")
                        .WithMany("Drivers")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_vehicle_id")
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Models.DriversAndTimes", b =>
                {
                    b.HasOne("TaxiService.Models.Drivers", "DriverPhoneNumberNavigation")
                        .WithMany("DriversAndTimes")
                        .HasForeignKey("DriverPhoneNumber")
                        .HasConstraintName("fk_driver_phone")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Time", "Time")
                        .WithMany("DriversAndTimes")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("fk_time_id")
                        .IsRequired();
                });

            modelBuilder.Entity("TaxiService.Models.Order", b =>
                {
                    b.HasOne("TaxiService.Models.Clients", "ClientPhoneNumberNavigation")
                        .WithMany("Order")
                        .HasForeignKey("ClientPhoneNumber")
                        .HasConstraintName("fk_client")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Drivers", "DriverPhoneNumberNavigation")
                        .WithMany("Order")
                        .HasForeignKey("DriverPhoneNumber")
                        .HasConstraintName("fk_driver")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Location", "Location")
                        .WithMany("Order")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_order_location_id")
                        .IsRequired();

                    b.HasOne("TaxiService.Models.Time", "OrderTime")
                        .WithMany("Order")
                        .HasForeignKey("OrderTimeId")
                        .HasConstraintName("fk_order_time")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
